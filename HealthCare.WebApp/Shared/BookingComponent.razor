@page "/booking"
@attribute [Authorize]
@using HealthCare.Core.Models;
@inject BookingService BookingService
@inject HealthCareContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@using HealthCare.Core.Data
@using System.Security.Claims


<h3>Book an Appointment</h3>

<input type="datetime-local" @bind="selectedTime" />

<select @bind="selectedService" title="hej">
    <option value="General Checkup">General Checkup</option>
    <option value="Vaccination">Vaccination</option>
    <option value="Amputation">Amputation</option>
    <option value="Lobotomy">Lobotomy</option>
    <option value="Mercury Treatment">Mercury Treatment</option>
    <option value="Leech Therapy">Leech Therapy</option>
    <option value="Electroshock Therapy">Electroshock Therapy</option>

</select>
<button @onclick="BookAppointment">Book</button>

@if (isSaveSuccessful)
{
    <p style="color: green;">Booking confirmed!</p>
}

@code {
    private DateTime selectedTime = DateTime.Now;
    private Patient patient;
    private string selectedService = "General Checkup";
    private bool isSaveSuccessful = false;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var auth0Id = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            patient = DbContext.Patients.FirstOrDefault(p => p.Auth0Id == auth0Id);
        }
    }

    private async Task BookAppointment()
    {
        if (patient != null && !string.IsNullOrEmpty(selectedService))
        {
            var newBooking = new Booking
                {
                    Time = selectedTime,
                    PatientId = patient.Id,
                    Service = selectedService
                };

            BookingService.AddBooking(newBooking);

            isSaveSuccessful = true;
        }
    }
}
