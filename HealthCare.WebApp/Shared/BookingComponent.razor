@page "/booking"
@attribute [Authorize]
@inject BookingService BookingService
@inject CaregiverService CaregiverService
@inject AppointmentService AppointmentService
@inject HealthCareContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (patient != null)
{
    <div id="topTextBooking">
        <h3>Book an Appointment</h3>
    </div>
    <div id="bookingFormTop">
        <div>
            <select id="selectCaregiver" @onchange="SelectedCareGiver">
                <option value="">Select a Caregiver</option>
                @foreach (var gubbe in careGivers)
                {
                    <option value="@gubbe.Id">@gubbe.Name</option>
                }
            </select>
        </div>

        <div>
            <select @bind="selectedService" title="hej">
                <option value="">Select a Service</option>
                <option value="General Checkup">General Checkup</option>
                <option value="Vaccination">Vaccination</option>
                <option value="Amputation">Amputation</option>
                <option value="Lobotomy">Lobotomy</option>
                <option value="Mercury Treatment">Mercury Treatment</option>
                <option value="Leech Therapy">Leech Therapy</option>
                <option value="Electroshock Therapy">Electroshock Therapy</option>
            </select>
        </div>

        <div>
            <select id="selectAppointmentTime" title="Select_Time" @bind="selectedAppointmentId">
                <option value="">Select a Time</option>
                @foreach (var appointment in availableAppointments)
                {
                    <option value="@(appointment.Id)">
                        @((object)appointment.StartTime))
                    </option>
                }
            </select>
        </div>

        <div>
            <label for="description">Description:</label>
            <textarea id="description" @bind="description"></textarea>
        </div>

        <div>
             <button @onclick="MakeAppointment">BookAppointment</button> 
            

        </div>

    </div>

    @if (isSaveSuccessful)
    {
        <p style="color: green;">Booking confirmed!</p>

        <div>
            @if (newAppointment != null)
            {
                <div>
                    <h4>New Appointment Details:</h4>
                    <p><strong>Patient:</strong> @newAppointment.Patient.Name</p>
                    <p><strong>Caregiver:</strong> @newAppointment.Caregiver.Name</p>
                    <p><strong>Service:</strong> @newAppointment.Service</p>
                    <p><strong>Start Time:</strong> @newAppointment.StartTime</p>
                    <p><strong>End Time:</strong> @newAppointment.EndTime</p>
                    <p><strong>Description:</strong> @description</p>
                </div>
            }
        </div>
    }

}
else
{
    <p>NO ACCESS</p>
}

@code {
    private string description;
    private Guid selectedAppointmentId;
    private DateTime selectedTime;
    private string selectedService;
    private Guid selectedCaregiverId;

    private bool isSaveSuccessful = false;

    private Patient patient;
    private Caregiver selectedCaregiver;
    private List<Caregiver> careGivers = new List<Caregiver>();
    private Appointment newAppointment;
    private List<Appointment> availableAppointments = new List<Appointment>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated) 
        {
            var auth0Id = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            patient = DbContext.Patients.FirstOrDefault(p => p.Auth0Id == auth0Id);
        }

        careGivers = CaregiverService.GetCaregivers().ToList();
    }

    private async Task SelectedCareGiver(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value.ToString(), out Guid selectedId))
        {
            selectedCaregiverId = selectedId;
            selectedCaregiver = careGivers.FirstOrDefault(g => g.Id == selectedCaregiverId);

            if (selectedCaregiver != null)
            {
                availableAppointments = await AppointmentService.GetCaregiverAvailableAppointments(selectedCaregiver.Id);
                StateHasChanged(); 
            }
        }
    }


    private async Task MakeAppointment()
    {
        if (patient != null && !string.IsNullOrEmpty(selectedService) && selectedAppointmentId != Guid.Empty)
        {
            var selectedAppointment = availableAppointments.FirstOrDefault(a => a.Id == selectedAppointmentId);

            if (selectedAppointment != null)
            {
                selectedAppointment.Patient = patient;
                selectedAppointment.Service = selectedService;
                selectedAppointment.Description = description;
                selectedAppointment.IsBooked = true;

                await DbContext.SaveChangesAsync();

                isSaveSuccessful = true;

                newAppointment = selectedAppointment;

                availableAppointments = await AppointmentService.GetCaregiverAvailableAppointments(selectedCaregiverId);

               StateHasChanged();
               
            }
        }
    }

}
