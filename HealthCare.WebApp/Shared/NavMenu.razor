@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject PatientService PatientService
@inject HealthCareContext DbContext
@inject ApplicationUserService ApplicationUserService


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="https://i.postimg.cc/Kj18vJ3Q/Health-Care-Logo.png" alt="HealthCare Logo" style="height: 2rem; max-width: 100%; width: auto;">
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div>
    @if (currentUser?.Identity?.IsAuthenticated ?? false)
    {
        <div class="nav-item px-3">
            <p style="color: white;">@userName</p>
            <button class="btn btn-sm btn-secondary ml-2" @onclick="Logout">Logout</button>
        </div>
    }
    else
    {
        <div class="nav-item px-3">
            <button class="btn btn-sm btn-primary" @onclick="Login">Login</button>
        </div>
    }
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    @if (Access == false)
                    {
                        <NavLink class="nav-link" href="booking">
                            <span class="oi oi-plus" aria-hidden="true"></span> Booking
                        </NavLink>
                    }
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="feedback">
                        <span class="oi oi-plus" aria-hidden="true"></span> Feedback
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="appointment">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Appointments
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    @if (Access == false)
                    {
                        <NavLink class="nav-link" href="my_page">
                            <span class="oi oi-list-rich" aria-hidden="true"></span> My Page
                        </NavLink>
                    }
                </div>
                <div class="nav-item px-3">
                    @if (Access == true)
                    {
                        <NavLink class="nav-link" href="dashboard">
                            <span class="oi oi-person" aria-hidden="true"></span> Dashboard
                        </NavLink>
                    }

                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private ClaimsPrincipal currentUser;
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    public string userName = "";
    private Patient patient;
    private Caregiver caregiver;
    public bool Access;

    // List<string> auth0Ids = new List<string>
    //     {
    //         "auth0|659fce7eb2b6d54c87f82290",
    //         "auth0|659fd055a4ffcf97947ac05b",
    //         "auth0|659fd0d0b2b6d54c87f823d0",
    //         "auth0|659fd1182c6a20cc35b2bc25",
    //         "auth0|659fd140a4ffcf97947ac0de",
    //         "auth0|659fd16f86e1aaad2fb02430"
    //     };


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;

        // string authID = await GetAuthId();

        Access = await ApplicationUserService.IsCaregiver();

        userName = await ApplicationUserService.GetUserName(patient, caregiver);

        // string googleName = authState?.User?.FindFirst(ClaimTypes.GivenName)?.Value;

        // if (googleName != null)
        // {
        //     userName = "Hej " + googleName;
        // }
        // else if (auth0Ids.Contains(authID))
        // {
        //     caregiver = DbContext.Caregivers.FirstOrDefault(p => p.Auth0Id == authID);

        //     if (caregiver != null)
        //     {
        //         if (caregiver.Name == "Not provided Not provided")
        //         {
        //             userName = "";
        //         }
        //         else
        //         {
        //             userName = "Hej " + caregiver.Name;
        //         }
        //     }
        //     else
        //     {
        //         userName = "";
        //     }
        // }
        // else
        // {
        //     patient = await PatientService.GetCurrentPatient();

        //     if (patient != null)
        //     {
        //         if (patient.Name == "Not provided Not provided")
        //         {
        //             userName = "";
        //         }
        //         else
        //         {
        //             userName = "Hej " + patient.Name;
        //         }
        //     }
        // }
    }

    // private async Task<string> GetAuthId()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     return authState.User.Claims
    //             .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
    //             .Select(c => c.Value)
    //             .FirstOrDefault() ?? string.Empty;
    // }

    // private async Task<bool> IsCaregiver()
    // {
    //     string authId = await GetAuthId();

    //     if (auth0Ids.Contains(authId))
    //     {
    //         return true;
    //     }
    //     else
    //     {
    //         return false;
    //     }
    // }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        NavigationManager.NavigateTo("/logout", forceLoad: true);
    }

    private async Task Login()
    {
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

}