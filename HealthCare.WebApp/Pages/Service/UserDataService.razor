@using HealthCare.Core.Data
@using System.Security.Claims
@using HealthCare.Core.Models
@page "/userdata-service"
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HealthCareContext DbContext
@inject NavigationManager NavigationManager

@code {

    private string fullName;
    private string firstName;
    private string lastName;
    private string nickname;
    private string emailAddress;
    private string profileImage;
    private string auth0Id;

    private readonly HashSet<string> doctorAuth0Ids = new HashSet<string>
    {
        "auth0|659fce7eb2b6d54c87f82290",
        "auth0|659fd055a4ffcf97947ac05b",
        "auth0|659fd0d0b2b6d54c87f823d0",
    };

    private readonly HashSet<string> nurseAuth0Ids = new HashSet<string>
    {
        "auth0|659fd1182c6a20cc35b2bc25",
        "auth0|659fd140a4ffcf97947ac0de",
        "auth0|659fd16f86e1aaad2fb02430",
    };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            firstName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value ?? "Not provided";
            lastName = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname)?.Value ?? "Not provided";
            emailAddress = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ?? "Not provided";
            profileImage = user.Claims.FirstOrDefault(c => c.Type == "picture")?.Value;
            auth0Id = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            fullName = $"{firstName} {lastName}";

            var caregiver = DbContext.Caregivers.FirstOrDefault(c => c.Auth0Id == auth0Id);
            var patient = DbContext.Patients.FirstOrDefault(p => p.Auth0Id == auth0Id);

            if (doctorAuth0Ids.Contains(auth0Id) || nurseAuth0Ids.Contains(auth0Id))
            {
                if (caregiver == null)
                {
                    caregiver = new Caregiver
                        {
                            Id = Guid.NewGuid(),
                            Auth0Id = auth0Id,
                            Email = emailAddress,
                            Name = fullName,
                            Role = doctorAuth0Ids.Contains(auth0Id) ? "Doctor" : "Nurse",
                        };
                    DbContext.Caregivers.Add(caregiver);
                    await DbContext.SaveChangesAsync();
                }
            }
            else if (patient == null)
            {
                patient = new Patient
                    {
                        Id = Guid.NewGuid(),
                        Auth0Id = auth0Id,
                        Email = emailAddress,
                        Name = fullName,
                        Appointments = new List<Appointment>()
                    };
                DbContext.Patients.Add(patient);
                await DbContext.SaveChangesAsync();
            }

            NavigationManager.NavigateTo("/");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
