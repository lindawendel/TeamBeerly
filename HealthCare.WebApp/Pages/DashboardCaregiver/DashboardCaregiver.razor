@page "/dashboard"
@attribute [Authorize]
@inject HealthCareContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Dashboard Caregiver</h3>

<div>
    <h5>Schedule</h5>
    <NavLink class="nav-link" href="Caregiver_CalendarView">Manage Availability</NavLink>
</div>

<div class="upcomingApointments">
    <h5>Upcoming Appointments</h5>
</div>

<div class="pastAppointments">
    <h5>Past Appointments</h5>
</div>

<div class="profile">
    <h5>Profile</h5>
    <label>Name: @Caregiver?.Name</label>
    <label>Date of Birth: @Caregiver.DateOfBirth</label>
    <label>Phone Number: @Caregiver.PhoneNumber</label>
    <label>Email: @Caregiver.Email</label>
    <NavLink class="nav-link" href="profile"> Edit Profile </NavLink>
</div>

@code {
    private List<Appointment> UpcomingAppointments = new List<Appointment>();
    private List<Appointment> PastAppointments = new List<Appointment>();
    private Caregiver Caregiver;

    protected override void OnInitialized()
    {
        SeedData();
        FetchUserDetails();
        GetAppointments();
    }

    private void SeedData()
    {
        if (!DbContext.Caregivers.Any())
        {
            var caregiver1 = new Caregiver { Id = Guid.NewGuid(), Auth0Id = "123", Role = "Doctor", Name = "Emma Engberg", Email = "emma.e@example.com", };
            var caregiver2 = new Caregiver { Id = Guid.NewGuid(), Auth0Id = "456", Role = "Nurse", Name = "Marcus Nilsson", Email = "marcus.n@example.com" };
            var caregiver3 = new Caregiver { Id = Guid.NewGuid(), Auth0Id = "789", Role = "Doctor", Name = "Sandra Ask", Email = "sandra.a@example.com" };

            DbContext.Caregivers.Add(caregiver1);
            DbContext.Caregivers.Add(caregiver2);
            DbContext.Caregivers.Add(caregiver3);

            DbContext.SaveChanges();
        }
    }

    private async Task FetchUserDetails()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var userId = authState.User.Claims
                   .Where(c => c.Type.Equals(ClaimTypes.NameIdentifier))
                   .Select(c => c.Value)
                   .FirstOrDefault() ?? string.Empty;

        GetCaregiver(userId);
    }

    private void GetCaregiver(string authId)
    {
        Caregiver = DbContext.Caregivers.FirstOrDefault(p => p.Auth0Id == authId);
    }

    private void GetAppointments()
    {
        var now = DateTime.Now;

        if (Caregiver != null)
        {
            UpcomingAppointments = DbContext.Appointments
                .Where(a => a.StartTime > now && a.Caregiver.Id == Caregiver.Id)
                .Include(a => a.Patient)
                .OrderBy(a => a.StartTime)
                .ToList();

            PastAppointments = DbContext.Appointments
                .Where(a => a.StartTime < now && a.Caregiver.Id == Caregiver.Id)
                .Include(a => a.Patient)
                .OrderByDescending(a => a.StartTime)
                .ToList();
        }
    }
}