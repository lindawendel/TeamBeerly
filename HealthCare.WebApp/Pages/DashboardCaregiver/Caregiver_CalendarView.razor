@page "/Caregiver_CalendarView"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using HealthCare.Core.Models
@inject IJSRuntime JSRuntime
@inject IAppointmentService AppointmentService 
@inject HealthCare.Core.Data.HealthCareContext DbContext
@inject HttpClient httpClient
@layout MainLayout


<h3>Caregiver Availability Management</h3>

<!-- Form for adding new appointment slot -->
<form @onsubmit="AddAppointmentSlot">
    <label>Start Time:<input type="datetime-local" @bind="newAppointment.StartTime" required /></label>

    <label>End Time:<input type="datetime-local" @bind="newAppointment.EndTime" required /></label>

    <button type="submit">Add Slot</button>
</form>

<!-- FullCalendar to display existing appointment slots -->
<div id='calendar'></div>

@code {
    private List<Appointment> caregiverAppointments = new List<Appointment>();
    private Appointment newAppointment = new Appointment();
    private bool isInitialized = false;

    protected override void OnInitialized()
    {
        // Fetch and load existing caregiver appointments
        Task.Run(async () => await LoadCaregiverAppointments());
        isInitialized = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (isInitialized)
            {
                // Initialize FullCalendar
                await JSRuntime.InvokeVoidAsync("initializeCalendar", "caregivers", DotNetObjectReference.Create(this));
            }
            else
            {
                // Handle the case where initialization is not complete
            }
        }
        // Fetch and load existing caregiver appointments
        await LoadCaregiverAppointments();

        // Update FullCalendar
        await JSRuntime.InvokeVoidAsync("updateCalendarAppointments", caregiverAppointments);
    }

    private async Task LoadCaregiverAppointments()
    {
        try
        {
            Guid caregiverId = DbContext.Caregivers.FirstOrDefault()?.Id ?? Guid.Empty;

            if (caregiverId != Guid.Empty)
            {
                caregiverAppointments = await AppointmentService.GetCaregiverAppointments(caregiverId);
            }
            else
            {
                // Handle the case where caregiverId is not available
            }
        }
        catch (Exception ex)
        {


        }
    }

    private async Task AddAppointmentSlot()
    {

        try
        {
            newAppointment.Caregiver = DbContext.Caregivers.FirstOrDefault();

            // Add the new appointment to the database
            await AppointmentService.AddAppointment(newAppointment);

            // Update FullCalendar
            await JSRuntime.InvokeVoidAsync("addAppointmentSlotToCalendar", newAppointment);

            // Clear the form and reload appointments
            newAppointment = new Appointment();
            await LoadCaregiverAppointments();

            StateHasChanged();
        }
        catch (Exception Ex)
        {
            
        }
    }


        [JSInvokable]
        public async Task AddAppointmentFromCalendar(DateTime startTime, DateTime endTime)
        {
            var newAppointment = new Appointment
            {
                StartTime = startTime,
                EndTime = endTime,
                // Other properties initialization as needed
            };

        await AppointmentService.AddAppointment(newAppointment);

        // Update FullCalendar
        await JSRuntime.InvokeVoidAsync("addAppointmentSlotToCalendar", newAppointment);

        // Clear the form and reload appointments
        newAppointment = new Appointment();
        await LoadCaregiverAppointments();

        StateHasChanged();

        }




    // [JSInvokable]
    // public async Task AddAppointmentFromCalendar(object slot)
    // {
    //     try
    //     {
    //         // Deserialize the slot object and perform necessary actions
    //         // For example, cast it to a Dictionary<string, object>
    //         var slotData = slot as Dictionary<string, object>;

    //         // Create a new Appointment instance and set properties based on slotData
    //         var newAppointment = new Appointment
    //         {
    //             // Set properties based on slotData...
    //         };

    //         // Call your existing method to save the appointment to the database
    //         await AppointmentService.AddAppointment(newAppointment);
    //     }
    //     catch (Exception ex)
    //     {
    //         // Handle exception (log, show message, etc.)
    //     }
    // }
}
