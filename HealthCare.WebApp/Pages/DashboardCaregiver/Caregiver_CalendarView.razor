@page "/Caregiver_CalendarView"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components
@using HealthCare.Core.Models
@inject IJSRuntime JSRuntime
@inject IAppointmentService AppointmentService
@inject HealthCare.Core.Data.HealthCareContext DbContext
@inject AppointmentService appointmentService
@inject HttpClient httpClient
@layout MainLayout
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (caregiver != null)
{

    <h3>Caregiver Availability Management</h3>

    <!-- Form for adding new appointment slot -->
    <form @onsubmit="AddAppointmentSlot">
        <label>Start Time:<input type="datetime-local" @bind="newAppointment.StartTime" required /></label>

        <label>End Time:<input type="datetime-local" @bind="newAppointment.EndTime" required /></label>

        <button type="submit">Add Slot</button>
    </form>

    <!-- FullCalendar to display existing appointment slots -->
    <div id='calendar'></div>
}
else
{
    <p>NO ACCESS</p>
}
@code {
    private List<Appointment> caregiverAppointments = new List<Appointment>();
    private Appointment newAppointment = new Appointment();
    private bool isInitialized = false;
    private Caregiver caregiver;

    protected override void OnInitialized()
    {
        var authStateTask = Task.Run(() => AuthenticationStateProvider.GetAuthenticationStateAsync());
        authStateTask.Wait(); // This will block the current thread until the task is complete
        var authState = authStateTask.Result;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var auth0Id = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            caregiver = DbContext.Caregivers.FirstOrDefault(p => p.Auth0Id == auth0Id);
        }

        // Fetch and load existing caregiver appointments
        Task.Run(async () => await AppointmentService.GetCaregiverAppointments(caregiver.Id));
        isInitialized = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (isInitialized)
            {
                // Initialize FullCalendar
                await JSRuntime.InvokeVoidAsync("initializeCalendar", "caregivers", DotNetObjectReference.Create(this));
            }
            else
            {
                // Handle the case where initialization is not complete
            }
        }

        // Fetch and load existing caregiver appointments
        caregiverAppointments = await AppointmentService.GetCaregiverAppointments(caregiver.Id);

        // Update FullCalendar
        await JSRuntime.InvokeVoidAsync("updateCalendarAppointments", caregiverAppointments);
    }

    private async Task AddAppointmentSlot()
    {
        try
        {
            newAppointment.Caregiver = caregiver;

            // Add the new appointment to the database
            await AppointmentService.AddAppointment(newAppointment);

            // Update FullCalendar
            await JSRuntime.InvokeVoidAsync("addAppointmentSlotToCalendar", newAppointment);

            // Clear the form and reload appointments
            newAppointment = new Appointment();
            caregiverAppointments = await AppointmentService.GetCaregiverAppointments(caregiver.Id);

            StateHasChanged();
        }
        catch (AppointmentServiceException ex)
        {
            Console.Error.WriteLine($"AppointmentServiceException: {ex.Message}");

            // Display a user-friendly error message
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while adding the appointment. Please try again.");
        }
        catch (Exception ex)
        {
            // Handle other exceptions if needed
            Console.Error.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task AddAppointmentFromCalendar(DateTime startTime, DateTime endTime)
    {
        try
        {
            var newAppointment = new Appointment
                {
                    StartTime = startTime,
                    EndTime = endTime,
                    Caregiver = caregiver
                };

            await AppointmentService.AddAppointment(newAppointment);

            // Update FullCalendar
            await JSRuntime.InvokeVoidAsync("addAppointmentSlotToCalendar", newAppointment);

            // Clear the form and reload appointments
            newAppointment = new Appointment();
            caregiverAppointments = await appointmentService.GetCaregiverAppointments(caregiver.Id);

            StateHasChanged();
        }
        catch (AppointmentServiceException ex)
        {
            Console.Error.WriteLine($"AppointmentServiceException: {ex.Message}");

            // Display a user-friendly error message
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while adding the appointment. Please try again.");
        }
        catch (Exception ex)
        {
            // Handle other exceptions if needed
            Console.Error.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
    }

    [JSInvokable]
    public async Task CancelAppointmentFromCalendar(DateTime startTime, DateTime endTime)
    {
        var appointment = await appointmentService.GetSpecificAppointment(caregiver.Id, startTime);

        if (appointment.IsBooked == false)
        {
            appointmentService.DeleteAppointment(appointment);

            await JSRuntime.InvokeVoidAsync("alert", "Canceled!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "This appointment is booked and right now you can't cancel it");
        }



    }
}
