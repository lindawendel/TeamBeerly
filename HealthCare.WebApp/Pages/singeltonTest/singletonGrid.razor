@page "/grid"
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject GridService GridService

<h3>Grid</h3>
<table border="1">
    @foreach (var row in GridService.GetGrid())
    {
        <tr>
            @foreach (var cell in row)
            {
                <td>
                    <button @onclick="() => CellClicked(cell)" disabled="@(!cell.IsClickable)">@cell.Value</button>
                </td>
            }
        </tr>
    }
</table>

<h4>Click Events:</h4>
<ul>
    @foreach (var clickEvent in GridService.ClickEvents)
    {
        <li>@clickEvent.Time - ClickId @clickEvent.Id - Cell Clicked @clickEvent.Cell</li>
    }
</ul>

<button @onclick="ResetGrid">Reset Grid</button>

@code {
    private HubConnection hubConnection;
    private GridHub gridHub;

    private async Task StartConnection()
    {
        if (hubConnection == null)
        {
            var hubConnectionBuilder = new HubConnectionBuilder();
            hubConnection = hubConnectionBuilder
                .WithUrl("https://localhost:7139/gridHub")
                .Build();

            hubConnection.On("ReceiveGridUpdate", () =>
            {
                // Handle the grid update event
                // This might involve refreshing the grid or performing other UI updates
                GridService.UpdateGrid();
                StateHasChanged(); // Ensure UI updates are reflected
            });

            gridHub = new GridHub(JSRuntime, hubConnection);
            await gridHub.ConnectAsync();
            await gridHub.SendAsync("RequestGridUpdate");
        }
    }

    private void CellClicked(GridService.GridCell cell)
    {
        if (cell.IsClickable)
        {
            cell.IsClickable = false;
            GridService.UpdateGrid(); // Update the grid with the new clickable cells
            hubConnection.SendAsync("BroadcastGridUpdate");
        }
    }

    private void ResetGrid()
    {
        foreach (var clickEvent in GridService.ClickEvents)
        {
            clickEvent.IsClickable = true;
        }

        GridService.ResetGrid(); // Reset the grid and update clickable cells

        hubConnection.SendAsync("BroadcastGridUpdate");
    }

    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
    }
}
